---
format: html
editor: visual
---

```{r}
library(ggplot2)
```

Cargar los datos en un dataframe llamado: airbnb

```{r}
airbnb<-read.csv('data//airbnb.csv',sep = ',', stringsAsFactors = T)
```

Mostrar las primeras 6 filas del dataframe

```{r}
head(airbnb)
```

Renombrar las columnas de la siguiente forma:

| Nombre original        | Nuevo nombre   |
|------------------------|----------------|
| Zipcode                | CodigoPostal   |
| Neighbourhood.Cleansed | Barrio         |
| Property.Type          | TipoPropiedad  |
| Room.Type              | TipoAlquiler   |
| Accommodates           | MaxOcupantes   |
| Bathrooms              | NumBanyos      |
| Bedrooms               | NumDormitorios |
| Beds                   | NumCamas       |
| Bed.Type               | TipoCama       |
| Amenities              | Comodidades    |
| Square.Feet            | PiesCuadrados  |
| Price                  | Precio         |
| Review.Scores.Rating   | Puntuacion     |

```{r}
newnames<-c("CodigoPostal","Barrio","TipoPropiedad","TipoAlquiler","MaxOcupantes","NumBanyos",
"NumDormitorios","NumCamas","TipoCama","Comodidades","PiesCuadrados","Precio","Puntuacion")
colnames(airbnb) <- newnames

```

1.  Crea una nueva columna llamada MetrosCuadrados a partir de la columna PiesCuadrados.

Ayuda: 1 pie cuadrado son 0,092903 metros cuadrdados

```{r}
airbnb$MetrosCuadrados <- airbnb$PiesCuadrados * 0.092903
airbnb[, c("PiesCuadrados", "MetrosCuadrados")]
```

------------------------------------------------------------------------

2.  Miremos el código postal. Es una variable con entradas erroneas. Hay valores como '','-' y '28' que deberían ser considerados como NA. Así mismo también debería ser NA todos los que no compiencen por 28, ya que estamos con códigos postales de Madrid

El código postal 28002, 28004 y 28051 tienen entradas repetidas. Por ejemplo las entradas 28002\n20882 deberían ir dnetro de 28002

El codigo 2804 debería ser 28004, 2805 deberia ser 28005 y 2815 juncto con 2815 debería ser 28015

Limpia los datos de la columna Codigo Postal

```{r}
library(dplyr)

airbnb <- airbnb %>%
  mutate(
    CodigoPostal = case_when(
      CodigoPostal %in% c('', '-') | !grepl("^28", CodigoPostal) ~ NA_character_,
      CodigoPostal == '2804' ~ '28004',
      CodigoPostal == '2805' ~ '28005',
      CodigoPostal == '28051\n28051'~ '28051',
      CodigoPostal %in% c('2815', '2815') ~ '28015',
      TRUE ~ CodigoPostal
    )
  ) %>%
  mutate(
    CodigoPostal = gsub("^(28002)\\n.*$", "\\1", CodigoPostal)
  )

```

------------------------------------------------------------------------

3.  Una vez limpios los datos ¿Cuales son los códigos postales que tenemos?

    ```{r}
    unique(airbnb$CodigoPostal)

    ```

------------------------------------------------------------------------

4.  ¿Cuales son los 5 códigos postales con más entradas? ¿Y con menos? ¿Cuantas entradas tienen?

```{r}
top_5_codigos <- sort(table(airbnb$CodigoPostal), decreasing=TRUE)[1:5]
bottom_5_codigos <- tail(table(airbnb$CodigoPostal), decreasing=TRUE)[1:5]
top_5_codigos
bottom_5_codigos
```

------------------------------------------------------------------------

5.  ¿Cuales son los barrios que hay en el código postal 28012?

```{r}
unique(airbnb$Barrio[airbnb$CodigoPostal=='28012'])
```

```{r}

barrios_28012 <- airbnb[airbnb$CodigoPostal == '28012', 'Barrio']
barrios_unicos_28012 <- unique(barrios_28012)
barrios_unicos_28012

```

------------------------------------------------------------------------

6.  ¿Cuantas entradas hay en cada uno de esos barrios para el codigo postal 28012?

```{r}
table(airbnb$Barrio[airbnb$CodigoPostal=='28012'])
```

------------------------------------------------------------------------

7.  ¿Cuantos barrios hay en todo el dataset airbnb? ¿Cuales son?

```{r}
n_distinct(airbnb$Barrio)
unique(airbnb$Barrio)
```

------------------------------------------------------------------------

8.  ¿Cuales son los 5 barrios que tienen mayor número entradas?

```{r}
sort(table(airbnb$Barrio), decreasing=TRUE)[1:5]
```

------------------------------------------------------------------------

9.  ¿Cuantos Tipos de Alquiler diferentes hay? ¿Cuales son? ¿Cuantas entradas en el dataframe hay por cada tipo?

Muestra el diagrama de cajas del precio para cada uno de los diferentes Tipos de Alquiler

```{r}
table(airbnb$TipoAlquiler)

ggplot(airbnb, aes(x = TipoAlquiler, y = Precio)) +
  geom_boxplot() +
  labs(title = "Precio por Tipo de Alquiler",
       x = "Tipo de Alquiler",
       y = "Precio")

```

------------------------------------------------------------------------

10. Cual es el precio medio de alquiler de cada uno, la diferencia que hay ¿es estadísticamente significativa? ¿Con que test lo comprobarías? Como se puede ver la diferencia es significativa entre entire room y los dos otros tipos, haria un test t-student para comprobar la entire con uno de los otros dos(que solo viendo la media son similares, aunque este indicador es poco robusto sería mejor ahondar mas en el dato) o como primera opción al ser 3 usaría un Análisis de Varianza

```{r}
entirePrecio <- mean(airbnb$Precio[airbnb$TipoAlquiler == "Entire home/apt"], na.rm=TRUE)
privatePrecio <- mean(airbnb$Precio[airbnb$TipoAlquiler == "Private room"], na.rm=TRUE)
sharedPrecio <- mean(airbnb$Precio[airbnb$TipoAlquiler == "Shared room"], na.rm=TRUE)

paste("El precio medio de entire room es", entirePrecio)
paste("El precio medio de private room es", privatePrecio)
paste("El precio medio de shared room es", sharedPrecio)

```

------------------------------------------------------------------------

11. Filtra el dataframe cuyos tipo de alquiler sea 'Entire home/apt' y guardalo en un dataframe llamado *airbnb_entire*. Estas serán las entradas que tienen un alquiler del piso completo.

```{r}
airbnb_entire <- filter(airbnb,airbnb$TipoAlquiler=="Entire home/apt")
table(airbnb_entire$TipoAlquiler)
```

------------------------------------------------------------------------

12. ¿Cuales son los 5 barrios que tienen un mayor número de apartamentos enteros en alquiler? Nota: Mirar solo en airbnb_entire. A partir de este punto y hasta que se diga lo contrario partiremos de airbnb_entire.

```{r}
sort(table(airbnb_entire$Barrio), decreasing=TRUE)[1:5]
```

------------------------------------------------------------------------

13. ¿Cuales son los 5 barrios que tienen un mayor precio medio de alquiler para apartamentos enteros (es decir, del dataframe airbnb_entire)? ¿Cual es su precio medio?

Ayuda: Usa la función aggregate `aggregate(.~colname,df,mean,na.rm=TRUE)`

```{r}
mediaBarrio <- aggregate(Precio ~ Barrio, data = airbnb_entire, mean, na.rm=TRUE)
mediaBarrio_ordenado <- mediaBarrio[order(-mediaBarrio$Precio), ]
top_5_barrios <- head(mediaBarrio_ordenado,5)
top_5_barrios
```

------------------------------------------------------------------------

14. ¿Cuantos apartamentos hay en cada uno de esos barrios?

Mostrar una dataframe con el nombre del barrio, el precio y el número de entradas.

Ayuda: Podeis crear un nuevo dataframe con las columnas "Barrio" y "Freq" que contenga el número de entradas en cada barrio y hacer un merge con el dataframe del punto anterior.

```{r}
# apartamentos por barrio
table(airbnb_entire$Barrio)

#nuevo DF
entradas_por_barrio <- as.data.frame(table(airbnb_entire$Barrio))
names(entradas_por_barrio) <- c("Barrio","NumeroDeEntradas")
nuevo_df <- merge(mediaBarrio, entradas_por_barrio, by = "Barrio")
nuevo_df
```

------------------------------------------------------------------------

15. Partiendo del dataframe anterior, muestra los 5 barrios con mayor precio, pero que tengan más de 100 entradas de alquiler.

```{r}
mas_100_entradas <- nuevo_df[nuevo_df$NumeroDeEntradas > 100,]
nuevodf_top5 <- head(mas_100_entradas[order(-mas_100_entradas$Precio), ],5)
nuevodf_top5
```

------------------------------------------------------------------------

16. Dibuja el diagrama de densidad de distribución de los diferentes precios. Serían 5 gráficas, una por cada barrio.

```{r}
top_5_barrios <- nuevodf_top5$Barrio
airbnb_entire_top5 <- airbnb_entire[airbnb_entire$Barrio %in% top_5_barrios, ]
ggplot(airbnb_entire_top5, aes(x = Precio, fill = Barrio)) +
  geom_density(alpha = 0.5) +
  facet_wrap(~ Barrio) +
  labs(title = "Distribución de la Densidad de Precios por Barrio",
       x = "Precio",
       y = "Densidad") 


```

------------------------------------------------------------------------

17. Calcula el tamaño medio, en metros cuadrados, para los 5 barrios anteriores y muestralo en el mismo dataframe junto con el precio y número de entradas

```{r}
tamano_medio_por_barrio <- aggregate(MetrosCuadrados ~ Barrio, data = airbnb_entire, mean, na.rm = TRUE)

nuevodf_top5_completo <- merge(nuevodf_top5, tamano_medio_por_barrio, by = "Barrio")
nuevodf_top5_completo


```

------------------------------------------------------------------------

18. Dibuja el diagrama de densidad de distribución de los diferentes tamaños de apartamentos. Serían 5 gráficas, una por cada barrio.

```{r}
ggplot(airbnb_entire_top5, aes(x = MetrosCuadrados, fill = Barrio)) +
  geom_density(alpha = 0.5) +
  facet_wrap(~ Barrio) +
  labs(title = "Distribución de la Densidad de Tamaños de Apartamentos por Barrio",
       x = "Tamaño en Metros Cuadrados",
       y = "Densidad") +
  theme_minimal()

```

------------------------------------------------------------------------

19. Esta claro que las medias de metros cuadrados de cada uno de estos 5 barrios parecen ser diferentes, pero ¿son estadísticamente diferentes? ¿Que test habría que usar para comprobarlo?

Si los test cumplen homogeneidad de varianzas y las supisiciones de normalidad usaría el Análisis de Varianza y sino fuera así un método que también conocía anteriormente para estos casos podría ser el de Kruskal-Wallis(Test no paramétrico)

------------------------------------------------------------------------

------------------------------------------------------------------------

Para únicamente los pisos de alquiler en el barrio de Sol:

`barrio_sol<-subset(airbnb_entire,Barrio=="Sol")`

Calcular un modelo lineal que combine alguna de estas variables: \* NumBanyos \* NumDormitorios \* MaxOcupantes \* MetrosCuadrados

20. Primero calculamos la correlación para ver como se relacionan estas variables entre sí.

```{r}

barrio_sol <- subset(airbnb_entire, Barrio == "Sol")
variables_interes <- barrio_sol[, c("NumBanyos", "NumDormitorios", "MaxOcupantes", "MetrosCuadrados")]

#matriz de correlación
matriz_correlacion <- cor(variables_interes, use = "complete.obs")
matriz_correlacion

```

------------------------------------------------------------------------

21. Se observa que la correlación entre el número de dormitorios y los metros cuadrados es sorprendentemente baja. ¿Son de fiar esos números?

Mediante un histograma o curvas de densidad podemos descartar números que notienen sentido en el dataframe barrio_sol, para tener una matriz de correlación que tenga mayor sentido.

```{r}
library(ggplot2)

ggplot(barrio_sol, aes(x = NumDormitorios)) +
  geom_histogram(binwidth = 1, fill = "blue", alpha = 0.5) +
  labs(title = "Histograma de Número de Dormitorios",
       x = "Número de Dormitorios",
       y = "Frecuencia")



```

```{r}
ggplot(barrio_sol, aes(x = MetrosCuadrados)) +
  geom_histogram(binwidth = 10, fill = "green", alpha = 0.5) +
  labs(title = "Histograma de Metros Cuadrados",
       x = "Metros Cuadrados",
       y = "Frecuencia") 
```

```{r}
barrio_sol <- subset(barrio_sol,MetrosCuadrados >= 5 & NumDormitorios >0)
```

```{r}

```

------------------------------------------------------------------------

22. Una vez que hayamos filtrado los datos correspondientes calcular el valor o la combinación de valores que mejor nos permite obtener el precio de un inmueble.

¿Que variable es más fiable para conocer el precio de un inmueble, el número de habitaciones o los metros cuadrados? es mas fiable el número de dormitorios

```{r}

correlacion_dormitorios_precio <- cor(airbnb_entire$NumDormitorios, airbnb_entire$Precio, use = "complete.obs")

correlacion_metros_precio <- cor(airbnb_entire$MetrosCuadrados, airbnb_entire$Precio, use = "complete.obs")
correlacion_dormitorios_precio
correlacion_metros_precio

```

------------------------------------------------------------------------

23. Responde con su correspondiente margen de error del 95%, ¿cuantos euros incrementa el precio del alquiler por cada metro cuadrado extra del piso? esta entre estos dos valores

    ```         
    0.4213024 0.6620878
    ```

```{r}

modelo <- lm(Precio ~ MetrosCuadrados, data = airbnb_entire)
summary(modelo)
intervalo_confianza <- confint(modelo, "MetrosCuadrados", level = 0.95)
intervalo_confianza

```

------------------------------------------------------------------------

24. Responde con su correspondiente margen de error del 95%, ¿cuantos euros incrementa el precio del alquiler por cada habitación? entre estos dos valores

    ```         
    31.13923 33.33743
    ```

```{r}
modelo2 <- lm(Precio ~ NumDormitorios, data = airbnb_entire)
intervalo_confianza <- confint(modelo2, "NumDormitorios", level = 0.95)

summary(modelo)
intervalo_confianza
```

------------------------------------------------------------------------

25. ¿Cual es la probabilidad de encontrar, en el barrio de Sol, un apartamento en alquiler con 3 dormitorios? ¿Cual es el intervalo de confianza de esa probabilidad?

------------------------------------------------------------------------

```{r}
# Filtrar los apartamentos en el barrio de Sol
sol_apartamentos <- subset(airbnb_entire, Barrio == "Sol")

# Calcular el número total de apartamentos en Sol
total_sol <- nrow(sol_apartamentos)

# Calcular el número de apartamentos con 3 dormitorios en Sol
tres_dormitorios_sol <- sum(sol_apartamentos$NumDormitorios == 3)

# Calcular la probabilidad
probabilidad_tres_dormitorios <- tres_dormitorios_sol / total_sol

# Calcular el intervalo de confianza para la proporción
intervalo_confianza <- binom.test(tres_dormitorios_sol, total_sol)$conf.int

# Mostrando resultados
probabilidad_tres_dormitorios
intervalo_confianza

```
